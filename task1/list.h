#pragma once


struct Node {
    int val;
    Node* next;

    Node(int _val) : val(_val), next(nullptr) {}
};

struct List {
    Node* first;
    Node* last;

    // функция вывода элементов на экран
    // уже реализована
    void print();

    // функция доступа к элементу по индексу
    // часто её нет в реализаци, тут можно черпать пример использования листа
    // уже реализована
    Node* operator[] (const int index); // например list=(10->20->30), тогда list[1] = 20;

// задача:
    // реализовать функции для структуры ниже
    // https://en.wikipedia.org/wiki/Linked_list
    
    // конструктор по умолчанию, ожидается определение пустого контейнера
    List();

    // функция очищает лист
    void clear();

    // функция проверяет лист на пустоту
    bool is_empty();

    // функция поиска первой структуры Node, которая в себе содержит значение _val.
    // Вернуть указатель на структуру Node если значение найдено, иначе указатель на пустоту
    Node* find(int _val);

    // функция добавления значения в начало структуры.
    // примечание: добавление перед первым элементом, т.е. вставляемый элемент становиться first
    void push_front(int _val);

    // функция добавления значения в конец структуры.
    void push_back(int _val);

    // функция удаления первого элемента в структуре.
    // примечание: после удаления первого элемента, если присутствовал 2й элемент перед удалением, то структура first должна указывать на этот элемент 
    void remove_front();

    // функция удаления последнего элемента в структуре.
    // примечание: после удаления последнего элемента, если присутствовал предшествующий последнему элемент перед удалением, то структура last должна указывать на этот элемент 
    void remove_back();

    // функция удаления определённой структуры Node.
    // если функция не нашла данную Node* в листе, то возврашает false, что сообщает о неудачном удалении.
    // Иначе возвращает true, что значит удаление успешно
    // применение предусматривает использование функции find.
    // пример работы: list=(1->10->100->200->nullptr). list.remove(&Node(10)).
    // после удаления list=(1->100->200->nullptr). list.remove(&Node(200)).
    // после удаления list=(1->100->nullptr). 
    bool remove(const Node* _node);
};
